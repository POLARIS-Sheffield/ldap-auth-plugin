/*
 * xnat-ldap-auth-plugin: build.gradle
 * XNAT https://www.xnat.org
 * Copyright (c) 2019, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

buildscript {
    ext {
        vXnat = "1.8.0"
    }
}

plugins {
    id "eclipse"
    id "idea"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "com.palantir.git-version" version "0.12.3"
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.nrg.xnat.build.xnat-data-builder" version "1.8.0"
}

group "org.nrg.xnatx.plugins.auth"
version "1.1.0.polaris1"
description = "XNAT LDAP Authentication Provider"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation("org.nrg.xdat:core") {
        transitive = false
    }
    implementation("org.nrg:prefs") {
        transitive = false
    }
    implementation("org.nrg:framework") {
        transitive = false
    }

    implementation "org.springframework:spring-web"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-ldap"

    implementation "org.apache.commons:commons-lang3"
    implementation "org.hibernate.javax.persistence:hibernate-jpa-2.1-api"
    implementation "com.google.guava:guava"
    implementation "org.slf4j:slf4j-api"

    implementation "org.springframework.security:spring-security-web"
    implementation "javax.servlet:javax.servlet-api"

    compileOnly "com.google.code.findbugs:jsr305"
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"
def isDirty, branchName, gitHash, gitHashFull, commitDistance, lastTag, isCleanTag

try {
    def gitDetails = versionDetails()
    isDirty = gitVersion().endsWith ".dirty"
    branchName = gitDetails.branchName ?: "Unknown"
    gitHash = gitDetails.gitHash
    gitHashFull = gitDetails.gitHashFull
    commitDistance = gitDetails.commitDistance
    lastTag = gitDetails.lastTag
    isCleanTag = gitDetails.isCleanTag
} catch (IllegalArgumentException e) {
    logger.info "Got an error trying to read VCS metadata from git. It's possible this project is not under VCS control. Using placeholder values for manifest entries."
    isDirty = true
    branchName = "Unknown"
    gitHash = "None"
    gitHashFull = "None"
    commitDistance = 0
    lastTag = "None"
    isCleanTag = false
}

compileJava {
    options.fork = false
}

configurations {
    compile.extendsFrom(compileAndInclude)
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"] as String
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
    }
}

jar {
    manifest {
        attributes "Application-Name": project.description,
                "Build-Date": buildDate,
                "Build-Number": buildNumber,
                "Implementation-Version": project.version,
                "Implementation-Sha": gitHash,
                "Implementation-Sha-Full": gitHashFull,
                "Implementation-Commit": commitDistance,
                "Implementation-LastTag": lastTag,
                "Implementation-Branch": branchName,
                "Implementation-CleanTag": isCleanTag,
                "Implementation-Dirty": isDirty
    }
}

sourceSets {
    main {
        java {
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "XNAT LDAP Authentication Plugin")
                root.appendNode("url", "https://bitbucket.org/xnatx/ldap-auth-plugin")
                root.appendNode("inceptionYear", "2017")

                def scm = root.appendNode("scm")
                scm.appendNode("url", "https://bitbucket.org/xnatx/ldap-auth-plugin")
                scm.appendNode("connection", "scm:https://bitbucket.org/xnatx/ldap-auth-plugin")
                scm.appendNode("developerConnection", "scm:git@bitbucket.org:xnatx/ldap-auth-plugin.git")

                def license = root.appendNode("licenses").appendNode("license")
                license.appendNode("name", "Simplified BSD 2-Clause License")
                license.appendNode("url", "https://xnat.org/about/license.php")
                license.appendNode("distribution", "repo")

                root.appendNode("developers").with {
                    def rherrick = appendNode("developer")
                    rherrick.appendNode("id", "rherrick")
                    rherrick.appendNode("name", "Rick Herrick")
                    rherrick.appendNode("email", "jrherrick@wustl.edu")

                    def mfmckay = appendNode("developer")
                    mfmckay.appendNode("id", "mfmckay")
                    mfmckay.appendNode("name", "Mike McKay")
                    mfmckay.appendNode("email", "mfmckay@wustl.edu")

                    def kalpert = appendNode("developer")
                    kalpert.appendNode("id", "kalpert")
                    kalpert.appendNode("name", "Kate Alpert")
                    kalpert.appendNode("email", "kate@radiologics.com")
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault("repoUsername", "username")
                password propertyWithDefault("repoPassword", "password")
            }
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-${project.version.endsWith("-SNAPSHOT") ? "snapshot" : "release"}-local"
        }
    }
}

String propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
