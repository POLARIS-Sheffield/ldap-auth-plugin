/*
 * xnat-ldap-auth-plugin: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2017, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

buildscript {
    ext {
        vXnatDev = '1.7.5-RC1-SNAPSHOT'
        vXnat = '1.7.5-SNAPSHOT'
    }
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.8.0"
        classpath "io.franzbecker:gradle-lombok:1.10"
    }
}

group 'org.nrg.xnat.auth'
version '1.0.0-SNAPSHOT'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'xnat-data-builder'
apply plugin: 'com.palantir.git-version'

repositories {
    mavenLocal()
    maven {
        url "http://maven.imagej.net/content/groups/public"
        name "ImageJ Maven Repository"
    }
    jcenter()
    mavenCentral()
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-release"
        name "XNAT Release Repository"
    }
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot"
        name "XNAT Snapshot Repository"
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    implementation("org.nrg.xnat:web:${vXnatDev}") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation("org.nrg.xdat:core:${vXnatDev}") {
        transitive = false
    }
    implementation("org.nrg:prefs") {
        transitive = false
    }
    implementation("org.nrg:framework") {
        transitive = false
    }

    implementation "org.springframework:spring-web"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-ldap"

    implementation "org.apache.commons:commons-lang3"
    implementation "org.hibernate.javax.persistence:hibernate-jpa-2.1-api"
    implementation "com.google.guava:guava"
    implementation "org.slf4j:slf4j-api"
    implementation "log4j:log4j"

    implementation "org.springframework.security:spring-security-web"
    implementation "javax.servlet:javax.servlet-api"

    implementation localGroovy()

    compileOnly "com.google.code.findbugs:jsr305"
    compileOnly "org.apache.ivy:ivy:2.4.0"
    compileOnly("stratum:stratum") {
        transitive = false
    }

    testImplementation "junit:junit"
    testImplementation "org.springframework:spring-test"
}

if (hasProperty("rt.17.jar")) {
    // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
    // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
    def rt17jar = property "rt.17.jar"
    logger.info "Using ${rt17jar} as the bootstrap class path jar."
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) { task ->
            task.options.fork = true
            task.options.compilerArgs << "-XDignore.symbol.file"
            task.options.bootstrapClasspath = files(rt17jar)
        }
    }
} else {
    logger.warn "No value was set for the rt.17.jar build property, using the default bootstrap class path. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
    logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
}

jar {
    baseName = "xnat-${project.name}"
    manifest {
        attributes 'Application-Name': 'XNAT LDAP Authentication Provider',
                'Build-Date': new Date(),
                'Implementation-Sha': gitVersion(),
                'Implementation-Version': version
    }
}

compileJava {
    options.fork = false
}

configurations {
    compile.extendsFrom(compileAndInclude)
}

jacoco {
    toolVersion << dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task fatJar(type: Jar) {
    zip64 true
    baseName = project.name + '-all'
    from {
        configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        pom.withXml {
            def root = asNode()
            root.appendNode('name', 'XNAT Workshop 2016 Plugin')
            root.appendNode('url', 'https://bitbucket.org/xnatx/xnat-ldap-auth-plugin')
            root.appendNode('inceptionYear', '2016')

            def scm = root.appendNode('scm')
            scm.appendNode('url', 'https://bitbucket.org/xnatx/xnat-ldap-auth-plugin')
            scm.appendNode('connection', 'scm:https://bitbucket.org/xnatx/xnat-ldap-auth-plugin')
            scm.appendNode('developerConnection', 'scm:git@bitbucket.org:xnatx/xnat-ldap-auth-plugin.git')

            def license = root.appendNode('licenses').appendNode('license')
            license.appendNode('name', 'Simplified BSD 2-Clause License')
            license.appendNode('url', 'http://xnat.org/about/license.php')
            license.appendNode('distribution', 'repo')

            root.appendNode('developers').with {
                def rherrick = appendNode('developer')
                rherrick.appendNode('id', 'rherrick')
                rherrick.appendNode('name', 'Rick Herrick')
                rherrick.appendNode('email', 'jrherrick@wustl.edu')
            }
        }
    }
}

publishing.repositories {
    maven {
        credentials {
            // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
            // line in the form -PrepoUsername=foo -PrepoPassword=bar.
            username propertyWithDefault('repoUsername', 'username')
            password propertyWithDefault('repoPassword', 'password')
        }
        if (project.version.endsWith('-SNAPSHOT')) {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
        } else {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/xnat-generated/src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'build/xnat-generated/src/main/resources'
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
